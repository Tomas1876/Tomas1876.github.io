{"posts":[{"title":"git hooks로 커밋 전에 console.log 남아있는지 확인하기","text":"커밋 전에 console.log() 지워주세요 :innocent: 코드 리뷰를 몇 번이나 받아봤다고 벌써 두 번이나 이런 코멘트를 받았다.아마 나만 이런 코멘트를 받는 것은 아닐 것이다.나 같아도 리뷰해야 하는 코드에 이런 부분이 보이면 집어 줄 것 같다.이대로 운영에 배포 한다고 생각한다면 끔찍하기도 하고 개발 중인 코드에도 console.log()가 있어서 흐름을 파악하는 데에 방해가 되면 되었지 도움이 될 리는 없기 때문이다. 불필요한 console.log()는 최대한 빨리 삭제하고 순수하게 필요한 코드만 남기는 습관을 들여야 한다고 생각한다. 하지만 개발에 집중하면서 커밋하고, 수정하고, 커밋하고를 반복하다보면 console.log()를 삭제해야 한다는 걸 까먹을 때가 생기는 것 같다. 오죽하면 모니터에 포스트잇으로 제발 console.log() 좀 삭제하라고 써서 붙여두었는데, 하루도 못 가서 떨어지더라.이렇게 편리하고 자동화 된 것이 많은 시절에 console.log()만 온전히 내 기억력이나 조심성에 의존해서 제거해야 하는 것일까? 알아서 console.log()를 삭제해주는 툴은 없을까? 분명 나 말고도 수 많은 사람들이 비슷한 고민을 하고 머리 좋은 사람들이 좋은 걸 만들어두었을 거라는 생각이 들었다. 찾아보니 정말로 있었다, 자동으로 console.log()를 삭제해주는 플러그인이. 하지만 이건 dev가 아니라 실제 배포를 할 때 적용하는 거였기 때문에 내가 찾는 것과는 달랐다.처음에는 vscode 익스텐션, 혹은 자바스크립트 내장 기능으로 검색했다. 그런데 생각해보니 내가 진짜 원하는 건 console.log() 를 ‘삭제’하는 것이 아니라 ‘커밋 전에’ console.log()를 삭제하는 것이었다. git 과 연관하여 console.log() 삭제에 대해 검색하니 바로 내가 원하는 것이 나왔다. 1234567891011121314151617181920#!/bin/sh# Redirect output to stderr.exec 1&gt;&amp;2# enable user inputexec &lt; /dev/ttyconsoleRegexp='^[^-].*console.log'filenameRegexp='^[^-].*console.log(\\|^+++'if test &quot;$(git diff --cached | grep -c &quot;$consoleRegexp&quot;)&quot; != 0then exec git diff --cached | grep -ne &quot;$filenameRegexp&quot; | grep -B 1 &quot;$consoleRegexp&quot; read -rp &quot;There are some occurrences of console.log at your modification. Are you sure want to continue? (y/n) &quot; yn if echo &quot;$yn&quot; | grep &quot;^[Yy]$&quot; then exit 0; #THE USER WANTS TO CONTINUE else exit 1; # THE USER DONT WANT TO CONTINUE SO ROLLBACK fifi 출처 GitHub Gist 위 코드를 .git/hooks/pre-commit 파일에 추가하면 변경사항에 console.log()가 있는 경우 커밋하려고 할 때 알려준다. 이때 n를 선택하면 커밋이 취소된다. 파일명까지 알려주니 수정하기 편할 것 같다.(만약 pre-commit 파일의 이름이 pre-commit.sample 이라면 .sample을 없애야 적용된다) 이제 쓸데없는 코드를 깃에 올리지 않을 수 있을 것 같다.","link":"/git-hook-delete-console-log/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/hello-world/"},{"title":"[hexo] 블로그 링크 공유시 제목, 이미지 커스텀하기","text":"커스텀! 커스텀을 하자!나는 원래 ‘내 개인의 것’이라는 생각이 들면 내 입맛대로 조금씩 바꾸는 것을 좋아한다.어렸을 때부터 휴대폰을 사면 가장 먼저 하는 것이 배경화면과 테마, 앱배치를 조정하는 일이었다.깃블로그를 만들고 나서도 가장 먼저 _config.yml을 열어 제목과 기본 정보들을 내 것으로 채워넣었다.여기까진 쉽고 자료도 많았다. 문제는 내 블로그를 지인에게 자랑하거나, 글을 써서 공유하려고 만든 링크의 미리보기가 마음에 들지 않는다는 것이었다. 내가 사용하는 이카루스 테마의 기본 미리보기는 이렇다.나쁘지는 않지만 마음에 드는 것은 아니었다. 뭐를 바꿔야 할지 몰라서 _config.yml과 _config.icarus.yml 을 샅샅이 뒤졌지만 무엇을 바꿔야 할 지 알 수 없었다. 그래서 일단 의심가는 곳을 다 설정해봤다. 음…바뀌긴 했는데 하도 많은 곳을 건드려서 어디를 바꾼 것이 유효타인 줄도 모르겠고, 우선 내가 원하는 대로 바뀐 것도 아니었다. 그래서 설정을 다시 되돌리고 조금 더 생각해보기로 했다. 이때 설정 파일에서 open_graph 라는 항목을 발견했지만 뭔지 몰라서 넘어갔다(그러지 말았어야 했다). 기본 이미지는 어디서 설정하는 거지?이상한 것이, 위의 기본으로 생성되는 이미지와 문구도 결국 어디선가 가져왔을 텐데 그럼 어딘가 cdn으로 가져오거나 폴더 내에 파일이 있지 않겠는가? 그래서 일단 프로젝트 폴더를 뒤져보았다..deploy_git 폴더가 의심스러워서 열어보니 img 폴더가 있었고 하나씩 파일을 열어보니 og_image.png라는 파일이 위의 대표 이미지와 동일했다.찾았다! 그럼 이제 내가 원하는 사진을 넣고 그 파일 명을 og_image.png로 하면 되겠다!…싶었지만 명색이 개발자인데 이건 너무 야매(?)가 아닌가 싶어 철회했다.분명 어디선가 정의하든 선언하든 할당하든 설정을 잡아주는 코드가 있을 것이다!(이때 이미지 파일 이름이 og_image인 걸 잘 봤어야했다) 다음에 내가 한 것은 hexo 공식 사이트에 가서 검색한 것이었다. 기본 사용 가이드에서 찾아보니 외부 링크를 hexo 블로그 내부에 인용했을 때 예쁘게 보여주기 이런 내용밖에 없었다. 그럼 hexo 플러그인은? 외부 링크 블라블라 플러그인 가운데 하나가 눈에 띄었다. 내가 원하는 게 맞는 것 같았다. 그런데 레포를 보니 간단하게 뭘 설치하고 yml 파일을 조금 수정하면 되는 게 아니었다. 일단 이 플러그인의 read.md는 내게 layout.ejs 를 아래와 같이 수정하라고 했는데 내가 사용하고 있는 hexo-icarus에는 그 어디에도 layout.ejs 파일이 없었다.또 나만 안되지 공식문서랑 블로그는 다 되는데 나만 안돼 12345678910111213&lt;html&gt; &lt;head&gt; ... &lt;meta property=&quot;og:title&quot; content=&quot;Website title&quot; /&gt; &lt;meta name=&quot;twitter:title&quot; content=&quot;Website title /&gt; &lt;link rel=&quot;image_src&quot; href=&quot;&lt; link to your image preview &gt;&quot; /&gt; &lt;meta name=&quot;twitter:image:src&quot; content=&quot;&lt; link to your image preview &gt;&quot; /&gt; &lt;meta property=&quot;og:image&quot; content=&quot;&lt; link to your image preview &gt;&quot; /&gt; &lt;/head&gt; &lt;body&gt; ... &lt;/body&gt;&lt;/html&gt; 그때 meta 태그 부분의 og:image가 눈에 띄었다. 이게 뭔데 아까부터 자꾸 보이는 걸까?내 블로그를 개발자 도구로 열어서 element를 확인해봤다. og: 가 붙은 태그가 잔뜩 있었다. 다시 _config.icarus.yml 을 열어보니 open_graph가 눈에 들어왔다. 모르는 걸 보면 검색을 하자While many different technologies and schemas exist and could be combined together, there isn’t a single technology which provides enough information to richly represent any web page within the social graph. The Open Graph protocol builds on these existing technologies and gives developers one thing to implement. Developer simplicity is a key goal of the Open Graph protocol which has informed many of the technical design decisions. The Open Graph protocolopen_graph란? social graph가 뭔데…? 소셜 그래프(Social Graphe)는 소셜 네트워크를 표현하기 위해 사용되는 구조다. 소셜 그래프는 노드(Node)와 링크(Tie)로 이루어져 있다. 노드는 소셜 네트워크상에서 활동하는 각 개개인들을 나타내고, 링크는 이들 노드간의 관계를 표현한다. 이 그래프는 소셜 네트워크의 특성을 시각화하여 보여준다. 위키백과소셜 그래프란? 쉽게 말해 open_graph를 이용하면 개발자가 웹사이트의 정보를 미리 보여줄 수 있다는 거였다.나는 당장 설정 파일을 고치고 카카오톡으로 내 블로그 글의 링크를 나에게 보내봤다. 뭔가 이상하다.일단 푸른 바다 사진이 나오자 나는 기쁨의 단말마를 내뱉었다. 예쁘다!그런데 제목이 이상했다. 블로그 제목이 잘 표시된 건 맞지만, 나는 블로그의 기본 url을 공유한 게 아니라 특정 게시물을 공유했다. 내 의도대로 되었다면 제목 자리에 게시글의 제목이 표시되어야 했다. 이런 식이라면 내가 무슨 글을 공유하든 미리보기는 늘 내용이 같을 것이 아닌가?N사 서비스 중 세부 검색결과를 공유해도 늘 대표 url이 공유되는 것 때문에 불편을 겪어본 지라, 이 점이 마음에 걸렸다.다행히 클릭하면 내가 원하는 게시글로 잘 이동했지만 그래도 불만족스러웠다.블로그 게시글 화면에서 개발자 도구를 다시 켰다. 어? 왜 og:url이 게시글 url이 아니지? 설정파일에 적은 값들은 어떻게 태그로 변환되는 걸까? 중간에 무슨 문제가 있는 걸까?layout.ejs는 없었지만 styl 파일이 있길래 확인했더니 head.jsx를 임포트 하고 있었다. 123456789101112131415161718192021222324252627282930313233343536 // ...module.exports = class extends Component { render() { const { site, config, helper, page } = this.props; const { url_for, cdn, fontcdn, iconcdn, is_post } = helper; const { url, head = {}, article, highlight, variant = 'default' } = config; const { meta = [], manifest = {}, open_graph = {}, structured_data = {}, canonical_url = page.permalink, rss, favicon } = head; // ... {typeof open_graph === 'object' &amp;&amp; open_graph !== null ? &lt;OpenGraph type={open_graph.type || (is_post(page) ? 'article' : 'website')} title={open_graph.title || page.title || config.title} date={page.date} updated={page.updated} author={open_graph.author || config.author} description={open_graph.description || page.description || page.excerpt || page.content || config.description} keywords={(page.tags &amp;&amp; page.tags.length ? page.tags : undefined) || config.keywords} url={open_graph.url || page.permalink || url} images={openGraphImages} // ... title={open_graph.title || page.title || config.title} 을 보고 각각 확인해 보니 open_graph.title은 비어 있고 page.title은 잘 들어가 있었다. 그런데 왜 제대로 뜨지 않을까? url 때문이겠지? 왜 기본 url로 og:url이 설정될까? 이 부분에서 꽤 오래 삽질을 했다. 콘솔에 변수를 찍어보고 값이 있는 걸 확인하고 몇 번이고 generate를 하고 알고 보니 내가 설정 파일에서 open_graph의 url을 블로그 기본 url로 해놨더라. 그러니 url={open_graph.url || page.permalink || url}에서 기본 url이 먼저 할당되어 버린 거였다. 하하…코드를 잘 읽자… 역시 컴퓨터는 죄가 없다. 잘못하는 건 항상 나다그 부분을 지워주고 page.permalink가 값이 잘 들어가는 것을 확인한 뒤 다시 배포하고 게시글 링크를 공유했다. 와! 드디어 제목이 들어갔다!!! 나는 자리에서 벌떡 일어났다. 그리고 3초 후 앉았다. 게시글 커버 있는데 왜 반영 안됐지?이쯤 되면 조금 까다로운 사람이라는 생각이 들겠지만, 나는 만족할 수 없었다. 이 글은 내가 직접 커버까지 찍은 글이어서 그런가 상당히 마음에 드는 사진이었기 때문이다. head.jsx를 확인해보니 if문을 타고 og:img가 있는지를 확인하면서 내가 기본으로 설정한 바다 사진이 최종적으로 할당되는 것을 확인했다. 그래서 그 부분을 살짝 바꿔주었다. 123456789let openGraphImages = images; if ((typeof open_graph === 'object' &amp;&amp; open_graph !== null) &amp;&amp; ((Array.isArray(open_graph.image) &amp;&amp; open_graph.image.length &gt; 0) || typeof open_graph.image === 'string')) { // openGraphImages = open_graph.image; // 원래 코드 openGraphImages = page.cover || open_graph.image; // 변경한 코드 } else if ((Array.isArray(page.photos) &amp;&amp; page.photos.length &gt; 0) || typeof page.photos === 'string') { openGraphImages = page.photos; } 그리고 기대에 차서 다시 확인했다. 이걸로 끝이다!정말 그렇게 생각했는데. 저 대사가 온갖 이야기에서 절대 이대로 안 끝난다는 걸 보여주는 플래그라는 걸 왜 잊었을까.링크 미리보기는 그대로였다. 왜일까? open_graph에 대해서 다시 찾아보니, 이 정보는 한 번 생성되면 웹에서 캐시를 가지고 있어 변경사항이 있어도 반영이 매우 느리다고 했다. 나는 url자체가 바뀌는 등의 변화가 있어서 바로 바뀌었던 모양이다. 다행히도 메타와 카카오에서 아주 좋은 것을 제공하고 있었다. 메타 캐시 초기화 도구 카카오 공유 디버거 위 링크에 접속해서 원하는 사이트의 url을 입력하면 웹 크롤러가 수집한 페이지의 메타 데이터를 캐싱한 것을 지워준다.그리고 직접 페이지를 공유하지 않고도 내가 이 페이지를 배포했을 때 수집되는 메타 데이터를 미리 확인할 수 있다.수많은 나에게 보내기를 안 해도 됐던 거다 최종적으로 내 _config.icarus.yml 파일의 open_graph 부분은 이렇다. 3줄 요약 config 파일에서 open_graph를 찾는다 og:title, og:url, og:image 등 원하는 태그를 변경한다. 이전에 해당 페이지를 공유한 적이 있다면 위의 디버거 등을 통해 캐싱한 것을 삭제 후 공유한다.","link":"/make-a-pretty-link-preview/"},{"title":"[TS] Destructing","text":"(a:number)와 ({a} : {a:number})의 차이리액트와 타입스크립트를 이용해 투두 리스트를 만드는 중에 궁금한 것이 생겼다. 12345678910111213// 1const TodoList = (list: Array&lt;Todo&gt;) =&gt; { return ( ... );};//2const TodoList = ({list} : { list: Array&lt;Todo&gt; }) =&gt; { return ( ... );}; 12345678910const TodoPage = () =&gt; { ... return( &lt;Main&gt; &lt;h2&gt;할일 목록&lt;/h2&gt; ... &lt;TodoList list={todos} /&gt; &lt;/Main&gt; );} 위와 같이 TodoList를 작성하고 TodoPage에서 list를 넘겨주려고 했을 때, 1번처럼 작성하면 다음과 같은 에러가 발생한다. “Type { list: Todo[]; } is not assignable to type ‘IntrinsicAttributes &amp; Todo[]’.\\n Property ‘list’ does not exist on type ‘IntrinsicAttributes &amp; Todo[]’.” 그러나 2번처럼 작성하면 에러가 발생하지 않는다.무슨 차이지? IntrinsicAttributes라는 키워드로 타입스크립트 공식 문서도 찾아봤지만 내가 원하는 답은 없었다.그러다가 머릿속을 스친 문장 하나가 있었다. 타입스크립트에서 구조분해할당은 어떻게 하지? 생각해보니 함수의 인자 부분을 ({ list }) 로 받는 건 일반 js에서는 구조분해할당을 할 때 사용하는 문법이었다.그래서 destructing으로 다시 검색했다. Destructuring also works in function declarations. For simple cases this is straightforward: 1234type C = { a: string; b?: number };function f({ a, b }: C): void { // ...} Destructing타입스크립트 공식문서 타입스크립트라고 너무 어렵게 생각한 게 문제였다.","link":"/ts-destructing/"},{"title":"[react] 도전! 리액트 todo list 만들기(1)","text":"나의 리액트 &amp; 타입스크립트 도전기리액트로 투두 리스트를 만들면서 서로 코드리뷰 해주는 스터디에 참여하게 되었다.이번에 배운 것, 그리고 앞으로 배울 것을 놓치지 않기 위해 기록할 장소를 마련했다. 작년에 국비 학원에서 자바-스프링 웹개발자 과정을 수료하고 그 와중에 프론트엔드 개발자가 되고 싶어 리액트를 독학해 취업을 준비하다가 좌절한 경험이 있다. 그 때의 패인은 ‘조급함’이었다. 리액트로 취업을 하지 못했고 경력을 쌓아야겠다는 마음이 급해 우선 자바로 취업을 했다. 그리고 돌고 돌아 1년 후, 다시 리액트로 취업을 준비하게 되었다. 급하게 가려다가 비껴간 길로 1년을 달리다 돌아온 지금, 다시 조금해지는 마음을 가라앉히고 내가 해야 할 일과 하고 싶은 일을 정리하려 한다. 이 스터디로 내가 얻고 싶은 것은 다음과 같다. 리액트 다지기 react hook recoil react-router react-query 타입스크립트 다지기 커밋 컨벤션 익히기 코드 리뷰 문화에 익숙해지기 공식 문서 읽는 습관 들이기(지식에 대한 태도 :star:) github","link":"/react-todo-1/"}],"tags":[{"name":"dev","slug":"dev","link":"/tags/dev/"},{"name":"git","slug":"git","link":"/tags/git/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"front-end","slug":"front-end","link":"/tags/front-end/"},{"name":"react","slug":"react","link":"/tags/react/"},{"name":"typescript","slug":"typescript","link":"/tags/typescript/"}],"categories":[{"name":"GIT","slug":"GIT","link":"/categories/GIT/"},{"name":"JOURNAL","slug":"JOURNAL","link":"/categories/JOURNAL/"},{"name":"TYPESCRIPT","slug":"TYPESCRIPT","link":"/categories/TYPESCRIPT/"},{"name":"REACT","slug":"REACT","link":"/categories/REACT/"}],"pages":[]}