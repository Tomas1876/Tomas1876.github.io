{"posts":[{"title":"[react] 도전! 리액트 todo list 만들기(1)","text":"나의 리액트 &amp; 타입스크립트 도전기리액트로 투두 리스트를 만들면서 서로 코드리뷰 해주는 스터디에 참여하게 되었다.이번에 배운 것, 그리고 앞으로 배울 것을 놓치지 않기 위해 기록할 장소를 마련했다. 작년에 국비 학원에서 자바-스프링 웹개발자 과정을 수료하고 그 와중에 프론트엔드 개발자가 되고 싶어 리액트를 독학해 취업을 준비하다가 좌절한 경험이 있다. 그 때의 패인은 ‘조급함’이었다. 리액트로 취업을 하지 못했고 경력을 쌓아야겠다는 마음이 급해 우선 자바로 취업을 했다. 그리고 돌고 돌아 1년 후, 다시 리액트로 취업을 준비하게 되었다. 급하게 가려다가 비껴간 길로 1년을 달리다 돌아온 지금, 다시 조금해지는 마음을 가라앉히고 내가 해야 할 일과 하고 싶은 일을 정리하려 한다. 이 스터디로 내가 얻고 싶은 것은 다음과 같다. 리액트 다지기 react hook recoil react-router react-query 타입스크립트 다지기 커밋 컨벤션 익히기 코드 리뷰 문화에 익숙해지기 공식 문서 읽는 습관 들이기(지식에 대한 태도 :star:) github","link":"/react-todo-1/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/hello-world/"},{"title":"[TS] Destructing","text":"(a:number)와 {a} : {a:number}의 차이리액트와 타입스크립트를 이용해 투두 리스트를 만드는 중에 궁금한 것이 생겼다. 12345678910111213// 1const TodoList = (list: Array&lt;Todo&gt;) =&gt; { return ( ... );};//2const TodoList = ({list} : { list: Array&lt;Todo&gt; }) =&gt; { return ( ... );}; 12345678910const TodoPage = () =&gt; { ... return( &lt;Main&gt; &lt;h2&gt;할일 목록&lt;/h2&gt; ... &lt;TodoList list={todos} /&gt; &lt;/Main&gt; );} 위와 같이 TodoList를 작성하고 TodoPage에서 list를 넘겨주려고 했을 때, 1번처럼 작성하면 다음과 같은 에러가 발생한다. “Type { list: Todo[]; } is not assignable to type ‘IntrinsicAttributes &amp; Todo[]’.\\n Property ‘list’ does not exist on type ‘IntrinsicAttributes &amp; Todo[]’.” 그러나 2번처럼 작성하면 에러가 발생하지 않는다.무슨 차이지? IntrinsicAttributes라는 키워드로 타입스크립트 공식 문서도 찾아봤지만 내가 원하는 답은 없었다.그러다가 머릿속을 스친 문장 하나가 있었다. 타입스크립트에서 구조분해할당은 어떻게 하지? 생각해보니 함수의 인자 부분을 ({ list }) 로 받는 건 일반 js에서는 구조분해할당을 할 때 사용하는 문법이었다.그래서 destructing으로 다시 검색했다. Destructuring also works in function declarations. For simple cases this is straightforward: 1234type C = { a: string; b?: number };function f({ a, b }: C): void { // ...} Function declarations타입스크립트 공식문서 타입스크립트라고 너무 어렵게 생각한 게 문제였다.","link":"/ts-destructing/"}],"tags":[{"name":"front-end","slug":"front-end","link":"/tags/front-end/"},{"name":"react","slug":"react","link":"/tags/react/"},{"name":"typescript","slug":"typescript","link":"/tags/typescript/"}],"categories":[{"name":"react","slug":"react","link":"/categories/react/"},{"name":"typescript","slug":"typescript","link":"/categories/typescript/"}],"pages":[]}